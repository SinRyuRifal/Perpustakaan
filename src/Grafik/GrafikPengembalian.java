package Grafik;

import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import chart.ModelChart;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;

public class GrafikPengembalian extends javax.swing.JFrame {

    
    public GrafikPengembalian() {
        initComponents();
        chart.setTitle("Chart Data");
        chart.addLegend("Jumlah Pengembalian", Color.decode("#7b4397"), Color.decode("#dc2430"));
        setDataPesan();
    }

 public void setDataPesan() {
       try {
            JTextField inputFieldYear = new JTextField();
             inputFieldYear.setColumns(10); 
            inputFieldYear.addKeyListener(new KeyAdapter() {
                public void keyTyped(KeyEvent e) {
                    char c = e.getKeyChar();
                    if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                        e.consume();
                    }
                }
            });

            JPanel panelYear = new JPanel();
            panelYear.add(new JLabel("Masukkan Tahun:"));
            panelYear.add(inputFieldYear);

            int optionYear = JOptionPane.showOptionDialog(null, panelYear, "Input Tahun", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

            if (optionYear == JOptionPane.OK_OPTION) {
                String inputYear = inputFieldYear.getText().trim();

                if (inputYear.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Invalid Input");
                    return;
                }

                int year = Integer.parseInt(inputYear);

        List<ModelDataPengembalian> lists = new ArrayList<>();
        DatabaseConnection.getInstance().connectToDatabase();
        String sql = "SELECT \n" +
"    EXTRACT(MONTH FROM TANGGAL_DIKEMBALIKAN) AS month,\n" +
"    DATE_FORMAT(TANGGAL_DIKEMBALIKAN, '%M') AS month_name,\n" +
"    COUNT(*) AS \"Jumlah Pengembalian\"\n" +
"FROM \n" +
"    PENGEMBALIAN\n" +
"WHERE \n" +
"    YEAR(TANGGAL_DIKEMBALIKAN) = ?\n" +
"GROUP BY \n" +
"    EXTRACT(MONTH FROM TANGGAL_DIKEMBALIKAN), month_name\n" +
"ORDER BY \n" +
"    YEAR(TANGGAL_DIKEMBALIKAN) DESC, EXTRACT(MONTH FROM TANGGAL_DIKEMBALIKAN) DESC";

        PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);
        p.setInt(1, year);  
        ResultSet r = p.executeQuery();

        while (r.next()) {
            String month = r.getString("month_name");
            double amount = r.getDouble("Jumlah Pengembalian");

            lists.add(new ModelDataPengembalian(month, amount));
        }
        r.close();
        p.close();

        if (lists.size() == 1) {
            JOptionPane.showMessageDialog(null, "Data Kurang");
        } else {
            for (int i = lists.size() - 1; i >= 0; i--) {
                ModelDataPengembalian d = lists.get(i);
                chart.addData(new ModelChart(d.getMonth(), new double[]{d.getAmount()}));
            }
            chart.start();
        }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Inputan Tidak Valid");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            this.dispose();
        }
    }


   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelShadow1 = new panel.PanelShadow();
        chart = new chart.CurveLineChart();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelShadow1.setBackground(new java.awt.Color(0, 153, 153));
        panelShadow1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panelShadow1.setForeground(new java.awt.Color(0, 255, 255));
        panelShadow1.setColorGradient(new java.awt.Color(0, 204, 204));

        chart.setForeground(new java.awt.Color(237, 237, 237));
        chart.setFillColor(true);

        javax.swing.GroupLayout panelShadow1Layout = new javax.swing.GroupLayout(panelShadow1);
        panelShadow1.setLayout(panelShadow1Layout);
        panelShadow1Layout.setHorizontalGroup(
            panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelShadow1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelShadow1Layout.setVerticalGroup(
            panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShadow1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelShadow1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelShadow1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GrafikPengembalian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GrafikPengembalian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GrafikPengembalian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GrafikPengembalian.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GrafikPengembalian().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private chart.CurveLineChart chart;
    private panel.PanelShadow panelShadow1;
    // End of variables declaration//GEN-END:variables
}
