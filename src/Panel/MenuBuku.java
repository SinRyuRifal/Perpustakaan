package Panel;

import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import Config.Koneksi;

import com.raven.datechooser.SelectedDate;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.nio.file.Files;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Rifal
 */
public class MenuBuku extends javax.swing.JPanel {

    private int halamanSaatIni = 1;
    private int dataPerHalaman = 20;
    private int totalHalaman;
    private int totalPages;
    private String idKategori;
    private String idPenerbit;
  

    public MenuBuku() {
        initComponents();
txt_search.getDocument().addDocumentListener(new DocumentListener() {
    @Override
    public void insertUpdate(DocumentEvent e) {
        searchData();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        searchData();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        // Plain text components do not fire these events
    }
});

        setTabelModel();
        

        Color headerColor = new Color(127, 140, 117);
        tblData.getTableHeader().setBackground(headerColor);
        loadData();
        paginationBuku();
        actionButton();
        setTableRenderer();
        txtIDKategori.setEditable(false);
        txtNamaKategori.setEditable(false);
        txtIDPenerbit.setEditable(false);
        txtNamaPenerbit.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelMain = new javax.swing.JPanel();
        PanelView = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lb_iconAnggota = new javax.swing.JLabel();
        lb_halaman = new javax.swing.JLabel();
        btn_first = new javax.swing.JButton();
        btn_before = new javax.swing.JButton();
        cbx_data = new javax.swing.JComboBox<>();
        btn_next = new javax.swing.JButton();
        btn_last = new javax.swing.JButton();
        txt_search = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        btnAdd = new rojerusan.RSMaterialButtonRectangle();
        btnDelete = new rojerusan.RSMaterialButtonRectangle();
        btnCancel = new rojerusan.RSMaterialButtonRectangle();
        jLabel2 = new javax.swing.JLabel();
        PanelAdd = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lb_iconAnggota2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtISBN = new javax.swing.JTextField();
        btnSave = new rojerusan.RSMaterialButtonRectangle();
        btnCancel2 = new rojerusan.RSMaterialButtonRectangle();
        jLabel3 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        lbGambar = new javax.swing.JLabel();
        txtImage = new javax.swing.JTextField();
        btnBrowse = new keeptoo.KButton();
        btn_otherKategori = new javax.swing.JButton();
        txtIDKategori = new javax.swing.JTextField();
        txtNamaKategori = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtJudul = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtPengarang = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtTahunTerbit = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtIDPenerbit = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txtNamaPenerbit = new javax.swing.JTextField();
        btn_otherPenerbit = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        txtDeskripsi = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtCatatan = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        cbJenisBuku = new javax.swing.JComboBox<>();

        setLayout(new java.awt.CardLayout());

        PanelMain.setBackground(new java.awt.Color(255, 255, 255));
        PanelMain.setPreferredSize(new java.awt.Dimension(950, 590));
        PanelMain.setLayout(new java.awt.CardLayout());

        PanelView.setBackground(new java.awt.Color(255, 255, 255));
        PanelView.setPreferredSize(new java.awt.Dimension(950, 590));

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel9.setText("List Buku");

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel10.setText("Daftar Buku");

        lb_iconAnggota.setBackground(new java.awt.Color(250, 250, 250));
        lb_iconAnggota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/pngwing.com (16).png"))); // NOI18N

        lb_halaman.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_halaman.setText("Halaman of Total Halaman");

        btn_first.setText("First Page");

        btn_before.setText("<");

        cbx_data.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "40", "80" }));

        btn_next.setText(">");

        btn_last.setText("Last Page");

        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchKeyTyped(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_search_database_30px.png"))); // NOI18N

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblData.setRowHeight(150);
        tblData.setShowGrid(true);
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblData);

        btnAdd.setBackground(new java.awt.Color(80, 141, 105));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/13.png"))); // NOI18N
        btnAdd.setText("Tambah");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(190, 49, 68));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/13.png"))); // NOI18N
        btnDelete.setText("Hapus");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(153, 153, 153));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/13.png"))); // NOI18N
        btnCancel.setText("Batal");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/listpp.png"))); // NOI18N

        javax.swing.GroupLayout PanelViewLayout = new javax.swing.GroupLayout(PanelView);
        PanelView.setLayout(PanelViewLayout);
        PanelViewLayout.setHorizontalGroup(
            PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelViewLayout.createSequentialGroup()
                        .addComponent(lb_iconAnggota)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelViewLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 759, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelViewLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelViewLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(PanelViewLayout.createSequentialGroup()
                                .addComponent(btn_first)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_before)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_next)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_last))
                            .addComponent(lb_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PanelViewLayout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 488, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );
        PanelViewLayout.setVerticalGroup(
            PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lb_iconAnggota)
                    .addGroup(PanelViewLayout.createSequentialGroup()
                        .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(44, 44, 44)))
                .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelViewLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelViewLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lb_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_first, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_before, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_last, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        PanelMain.add(PanelView, "card2");

        PanelAdd.setBackground(new java.awt.Color(255, 255, 255));
        PanelAdd.setPreferredSize(new java.awt.Dimension(950, 590));

        jLabel13.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel13.setText("Input Data Buku");

        jLabel14.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel14.setText("Tambah Data Buku");

        lb_iconAnggota2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/pngwing.com (17).png"))); // NOI18N

        jLabel15.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel15.setText("ISBN");

        txtISBN.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtISBN.setForeground(new java.awt.Color(102, 102, 102));
        txtISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtISBNActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(80, 141, 105));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/13.png"))); // NOI18N
        btnSave.setText("Simpan");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel2.setBackground(new java.awt.Color(153, 153, 153));
        btnCancel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/13.png"))); // NOI18N
        btnCancel2.setText("Batal");
        btnCancel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancel2ActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/listpp.png"))); // NOI18N

        jLabel19.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel19.setText("ID Kategori");

        lbGambar.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        lbGambar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbGambar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon30/icons8_Book_120px_5.png"))); // NOI18N
        lbGambar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        txtImage.setFont(new java.awt.Font("SansSerif", 2, 18)); // NOI18N
        txtImage.setForeground(new java.awt.Color(204, 204, 204));
        txtImage.setText("Image Path");
        txtImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImageActionPerformed(evt);
            }
        });

        btnBrowse.setText("...");
        btnBrowse.setkBackGroundColor(new java.awt.Color(255, 255, 255));
        btnBrowse.setkBorderRadius(15);
        btnBrowse.setkEndColor(new java.awt.Color(236, 244, 214));
        btnBrowse.setkForeGround(new java.awt.Color(0, 0, 0));
        btnBrowse.setkHoverEndColor(new java.awt.Color(45, 149, 150));
        btnBrowse.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        btnBrowse.setkHoverStartColor(new java.awt.Color(38, 80, 115));
        btnBrowse.setkIndicatorColor(new java.awt.Color(204, 204, 204));
        btnBrowse.setkStartColor(new java.awt.Color(154, 208, 194));
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btn_otherKategori.setBackground(new java.awt.Color(172, 196, 140));
        btn_otherKategori.setText("Select");
        btn_otherKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_otherKategoriActionPerformed(evt);
            }
        });

        txtIDKategori.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtIDKategori.setForeground(new java.awt.Color(102, 102, 102));
        txtIDKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDKategoriActionPerformed(evt);
            }
        });

        txtNamaKategori.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtNamaKategori.setForeground(new java.awt.Color(102, 102, 102));
        txtNamaKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNamaKategoriActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel21.setText("Nama Kategori");

        jLabel22.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel22.setText("Judul Buku");

        txtJudul.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtJudul.setForeground(new java.awt.Color(102, 102, 102));
        txtJudul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJudulActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel20.setText("Pengarang");

        txtPengarang.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtPengarang.setForeground(new java.awt.Color(102, 102, 102));
        txtPengarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPengarangActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel23.setText("Tahun Terbit");

        txtTahunTerbit.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtTahunTerbit.setForeground(new java.awt.Color(102, 102, 102));
        txtTahunTerbit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTahunTerbitActionPerformed(evt);
            }
        });
        txtTahunTerbit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTahunTerbitKeyTyped(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel25.setText("ID Penerbit");

        txtIDPenerbit.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtIDPenerbit.setForeground(new java.awt.Color(102, 102, 102));
        txtIDPenerbit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDPenerbitActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel26.setText("Nama Penerbit");

        txtNamaPenerbit.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtNamaPenerbit.setForeground(new java.awt.Color(102, 102, 102));
        txtNamaPenerbit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNamaPenerbitActionPerformed(evt);
            }
        });

        btn_otherPenerbit.setBackground(new java.awt.Color(172, 196, 140));
        btn_otherPenerbit.setText("Select");
        btn_otherPenerbit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_otherPenerbitActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel27.setText("Deskripsi Buku");

        txtDeskripsi.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtDeskripsi.setForeground(new java.awt.Color(102, 102, 102));
        txtDeskripsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeskripsiActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel28.setText("Catatan Umum");

        txtCatatan.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        txtCatatan.setForeground(new java.awt.Color(102, 102, 102));
        txtCatatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCatatanActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel29.setText("Jenis Buku");

        cbJenisBuku.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        cbJenisBuku.setForeground(new java.awt.Color(102, 102, 102));
        cbJenisBuku.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Umum", "Ref", "Paket", "Fiksi", "Tandon" }));

        javax.swing.GroupLayout PanelAddLayout = new javax.swing.GroupLayout(PanelAdd);
        PanelAdd.setLayout(PanelAddLayout);
        PanelAddLayout.setHorizontalGroup(
            PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAddLayout.createSequentialGroup()
                .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelAddLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelAddLayout.createSequentialGroup()
                                .addComponent(lb_iconAnggota2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13))
                            .addGroup(PanelAddLayout.createSequentialGroup()
                                .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelAddLayout.createSequentialGroup()
                                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtPengarang)
                                            .addComponent(txtISBN)
                                            .addComponent(txtIDKategori)
                                            .addGroup(PanelAddLayout.createSequentialGroup()
                                                .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel15)
                                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(txtIDPenerbit))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(PanelAddLayout.createSequentialGroup()
                                                    .addComponent(txtNamaPenerbit)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btn_otherPenerbit, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelAddLayout.createSequentialGroup()
                                                    .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtNamaKategori, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                                                        .addComponent(txtTahunTerbit))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btn_otherKategori, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(txtJudul)))
                                        .addGap(87, 87, 87))
                                    .addGroup(PanelAddLayout.createSequentialGroup()
                                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(PanelAddLayout.createSequentialGroup()
                                                .addComponent(jLabel28)
                                                .addGap(455, 455, 455))
                                            .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(cbJenisBuku, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 194, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelAddLayout.createSequentialGroup()
                                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtCatatan, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtDeskripsi))
                                        .addGap(167, 167, 167)))
                                .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbGambar, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelAddLayout.createSequentialGroup()
                                        .addComponent(txtImage, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(62, 62, 62))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelAddLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        PanelAddLayout.setVerticalGroup(
            PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAddLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelAddLayout.createSequentialGroup()
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(88, 88, 88))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelAddLayout.createSequentialGroup()
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelAddLayout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel14))
                            .addComponent(lb_iconAnggota2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelAddLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbGambar, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtImage, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                            .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(PanelAddLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtJudul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIDKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNamaKategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_otherKategori))
                        .addGap(18, 18, 18)
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelAddLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPengarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelAddLayout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTahunTerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIDPenerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNamaPenerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_otherPenerbit))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel27)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDeskripsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCatatan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbJenisBuku, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(PanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        PanelMain.add(PanelAdd, "card2");

        add(PanelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void txtISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtISBNActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtISBNActionPerformed

    private void txt_searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyTyped
        // TODO add your handling code here:
        searchData();
    }//GEN-LAST:event_txt_searchKeyTyped

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked

        if (btnAdd.getText().equals("Tambah")) {
            btnAdd.setText("Ubah");
            btnDelete.setVisible(true);
            btnCancel.setVisible(true);
        }

    }//GEN-LAST:event_tblDataMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancel2ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnCancel2ActionPerformed

    private void txtImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImageActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        getImage();
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void txtIDKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDKategoriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDKategoriActionPerformed

    private void txtNamaKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNamaKategoriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNamaKategoriActionPerformed

    private void txtJudulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJudulActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtJudulActionPerformed

    private void btn_otherKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_otherKategoriActionPerformed

        Dialog_DataKategori dialogDataKategori = new Dialog_DataKategori(new javax.swing.JFrame(), true);
        dialogDataKategori.setVisible(true);

        if (dialogDataKategori.iskategoriSelected()) {

            String selectedidKategori = dialogDataKategori.getselectedidKategori();
            String selectednamaKategori = dialogDataKategori.getselectedNamaKategori();
            txtIDKategori.setText(selectedidKategori);
            txtNamaKategori.setText(selectednamaKategori);

        }
    }//GEN-LAST:event_btn_otherKategoriActionPerformed

    private void txtPengarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPengarangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPengarangActionPerformed

    private void txtTahunTerbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTahunTerbitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTahunTerbitActionPerformed

    private void txtIDPenerbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDPenerbitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDPenerbitActionPerformed

    private void txtNamaPenerbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNamaPenerbitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNamaPenerbitActionPerformed

    private void btn_otherPenerbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_otherPenerbitActionPerformed

        Dialog_DataPenerbit dialogDataPenerbit = new Dialog_DataPenerbit(new javax.swing.JFrame(), true);
        dialogDataPenerbit.setVisible(true);

        if (dialogDataPenerbit.ispenerbitSelected()) {

            String selectedidPenerbit = dialogDataPenerbit.getselectedidPenerbit();
            String selectednamaPenerbit = dialogDataPenerbit.getselectedNamaPenerbit();
            txtIDPenerbit.setText(selectedidPenerbit);
            txtNamaPenerbit.setText(selectednamaPenerbit);

        }
    }//GEN-LAST:event_btn_otherPenerbitActionPerformed

    private void txtDeskripsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeskripsiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDeskripsiActionPerformed

    private void txtCatatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCatatanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCatatanActionPerformed

    private void txtTahunTerbitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTahunTerbitKeyTyped
        char c = evt.getKeyChar();

        if (!Character.isDigit(c)) {
            evt.consume();
        }

        String text = txtTahunTerbit.getText();
        if (text.length() >= 4) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTahunTerbitKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelAdd;
    private javax.swing.JPanel PanelMain;
    private javax.swing.JPanel PanelView;
    private rojerusan.RSMaterialButtonRectangle btnAdd;
    private keeptoo.KButton btnBrowse;
    private rojerusan.RSMaterialButtonRectangle btnCancel;
    private rojerusan.RSMaterialButtonRectangle btnCancel2;
    private rojerusan.RSMaterialButtonRectangle btnDelete;
    private rojerusan.RSMaterialButtonRectangle btnSave;
    private javax.swing.JButton btn_before;
    private javax.swing.JButton btn_first;
    private javax.swing.JButton btn_last;
    private javax.swing.JButton btn_next;
    private javax.swing.JButton btn_otherKategori;
    private javax.swing.JButton btn_otherPenerbit;
    private javax.swing.JComboBox<String> cbJenisBuku;
    private javax.swing.JComboBox<String> cbx_data;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbGambar;
    private javax.swing.JLabel lb_halaman;
    private javax.swing.JLabel lb_iconAnggota;
    private javax.swing.JLabel lb_iconAnggota2;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtCatatan;
    private javax.swing.JTextField txtDeskripsi;
    private javax.swing.JTextField txtIDKategori;
    private javax.swing.JTextField txtIDPenerbit;
    private javax.swing.JTextField txtISBN;
    private javax.swing.JTextField txtImage;
    private javax.swing.JTextField txtJudul;
    private javax.swing.JTextField txtNamaKategori;
    private javax.swing.JTextField txtNamaPenerbit;
    private javax.swing.JTextField txtPengarang;
    private javax.swing.JTextField txtTahunTerbit;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables
 private void autoResizeAllColumns() {
        int columns = tblData.getColumnCount();
        for (int i = 0; i < columns; i++) {
            TableColumn column = tblData.getColumnModel().getColumn(i);
            int width = (int) tblData.getTableHeader().getDefaultRenderer()
                    .getTableCellRendererComponent(tblData, column.getHeaderValue(), false, false, -1, i)
                    .getPreferredSize().getWidth();
            for (int row = 0; row < tblData.getRowCount(); row++) {
                int preferedWidth = (int) tblData.getCellRenderer(row, i)
                        .getTableCellRendererComponent(tblData, tblData.getValueAt(row, i), false, false, row, i)
                        .getPreferredSize().getWidth();
                width = Math.max(width, preferedWidth);
            }
            column.setPreferredWidth(width);
        }
    }
private int getMaxColumnWidth(int columnIndex) {
    int maxWidth = 0;
    TableColumn column = tblData.getColumnModel().getColumn(columnIndex);

    for (int row = 0; row < tblData.getRowCount(); row++) {
        TableCellRenderer cellRenderer = tblData.getCellRenderer(row, columnIndex);
        Object value = tblData.getValueAt(row, columnIndex);
        Component cellRendererComponent = cellRenderer.getTableCellRendererComponent(tblData, value, false, false, row, columnIndex);
        maxWidth = Math.max(maxWidth, cellRendererComponent.getPreferredSize().width);
    }

   
    maxWidth += 10;

    return maxWidth;
}
    private void paginationBuku() {
        btn_first.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = 1;
                loadData();
            }

        });
        btn_before.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni > 1) {
                    halamanSaatIni--;
                    loadData();
                }
            }
        });
        cbx_data.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dataPerHalaman = Integer.parseInt(cbx_data.getSelectedItem().toString());
                halamanSaatIni = 1;
                loadData();
            }
        });
        btn_next.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni < totalPages) {
                    halamanSaatIni++;
                    loadData();
                }
            }
        });
        btn_last.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = totalPages;
                loadData();
            }
        });
    }

    private void actionButton() {
        btnAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                PanelMain.removeAll();
                PanelMain.add(PanelAdd);
                PanelMain.repaint();
                PanelMain.revalidate();

                if (btnAdd.getText().equals("Ubah")) {
                    dataTabel();
                    btnSave.setText("Perbarui");
                }

            }

        });
        btnSave.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (btnSave.getText().equals("Tambah")) {
                    btnSave.setText("Simpan");
                } else if (btnSave.getText().equals("Simpan")) {
                    insertData();
                } else if (btnSave.getText().equals("Perbarui")) {
                    updateData();
                }

            }

        });
        btnDelete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteData();
            }

        });
        btnCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showPanel();
                loadData();
            }

        });
        btnCancel2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showPanel();
                loadData();
            }

        });
    }

    private void calculateTotalPages() {
        int totalData = getTotalData();
        totalPages = (int) Math.ceil((double) totalData / dataPerHalaman);
    }

    private int getTotalData() {
        int totalData = 0;
        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT COUNT(*) AS total from Buku";

            try (PreparedStatement st = conn.prepareStatement(sql)) {
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    totalData = rs.getInt("total");

                }

            }

        } catch (Exception e) {
            Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, e);
        }
        return totalData;
    }

    private void loadData() {

        calculateTotalPages();
        int totalData = getTotalData();
        lb_halaman.setText(String.valueOf("Halaman " + halamanSaatIni + " dari Total Data " + totalData));

        int startIndex = (halamanSaatIni - 1) * dataPerHalaman;
        getData(startIndex, dataPerHalaman, (DefaultTableModel) tblData.getModel());

        btnDelete.setVisible(false);
        btnCancel.setVisible(false);
    }

    private void showPanel() {
        PanelMain.removeAll();
        PanelMain.add(new MenuBuku());
        PanelMain.repaint();
        PanelMain.revalidate();
    }

    private void resetForm() {
        txtISBN.setText("");
        txtJudul.setText("");
        txtPengarang.setText("");

    }

    private void setTabelModel() {
       DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
             return false;
        }
    };

        model.addColumn("ISBN");
        model.addColumn("Judul Buku");
        model.addColumn("Pengarang_Buku");
        model.addColumn("Tahun Terbit");
        model.addColumn("Deskripsi");
        model.addColumn("Catatan Umum");
        model.addColumn("Jenis Buku");
        model.addColumn("ID Kategori");
        model.addColumn("Nama Kategori");
        model.addColumn("ID Penerbit");
        model.addColumn("Nama Penerbit");
        model.addColumn("Gambar");
        model.addColumn("Stock");

        tblData.setModel(model);
      autoResizeAllColumns();
tblData.setAutoCreateRowSorter(true);

        tblData.getTableHeader().setReorderingAllowed(false);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        for (int i = 0; i < tblData.getColumnCount(); i++) {
            tblData.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            tblData.setDefaultEditor(Object.class, null);
            
        }
    }

    private void setTableRenderer() {
        class CustomRender extends DefaultTableCellRenderer {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

                if (value instanceof ImageIcon) {
                    ImageIcon icon = (ImageIcon) value;
                    Image originalImage = icon.getImage();
                    int desireWidth = 70;
                    int desireHeight = 90;

                    Image resizedImage = originalImage.getScaledInstance(desireWidth, desireHeight, Image.SCALE_SMOOTH);
                    ImageIcon resizedIcon = new ImageIcon(resizedImage);

                    JLabel label = new JLabel(resizedIcon);
                    label.setHorizontalAlignment(JLabel.CENTER);

                    return label;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }

        }
        tblData.getColumnModel().getColumn(11).setCellRenderer(new CustomRender());
    }

    private void getImage() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Gambar", "jpg", "png", "jpeg"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            txtImage.setText(path);

            try {
                byte[] img = Files.readAllBytes(selectedFile.toPath());
                ImageIcon imageIcon = new ImageIcon(img);

                int labelWidth = lbGambar.getWidth();
                int labelHeight = lbGambar.getHeight();

                int imageWidth = imageIcon.getIconWidth();
                int imageHeight = imageIcon.getIconHeight();

                double scaleX = (double) labelWidth / (double) imageWidth;
                double scaleY = (double) labelHeight / (double) imageHeight;
                double scale = Math.min(scaleX, scaleY);

                Image scaleImage = imageIcon.getImage().getScaledInstance(
                        (int) (scale * imageWidth),
                        (int) (scale * imageHeight),
                        Image.SCALE_SMOOTH);
                lbGambar.setIcon(new ImageIcon(scaleImage));

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    class ImageRender extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof ImageIcon) {
                ImageIcon icon = (ImageIcon) value;
                JLabel label = new JLabel(icon);
                label.setHorizontalAlignment(JLabel.CENTER);
                return label;
            }
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        }
    }

    private void insertData() {
        String idBuku = txtISBN.getText();
        String JudulBuku = txtJudul.getText();
        String Pengarang_Buku = txtPengarang.getText();
        String tahunTerbit = txtTahunTerbit.getText();
        String deskripsi = txtDeskripsi.getText();
        String catatan = txtCatatan.getText();
        String jenisBuku = cbJenisBuku.getSelectedItem().toString();
        String idKategori = txtIDKategori.getText();
        String namaKategori = txtNamaKategori.getText();
        String idPenerbit = txtIDPenerbit.getText();
        String namaPenerbit = txtNamaPenerbit.getText();

        String imagePath = txtImage.getText();

        if (idBuku.isEmpty() || JudulBuku.isEmpty() || Pengarang_Buku.isEmpty() || tahunTerbit.isEmpty() || idKategori.isEmpty() || idPenerbit.isEmpty()
                || imagePath.equals("Image Path")) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (isISBNAlreadyExists(idBuku)) {
            JOptionPane.showMessageDialog(this, "ISBN sudah ada dalam database!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (Connection conn = Koneksi.getConnection()) {
            String sql = "INSERT INTO Buku (ISBN, Judul_Buku, Pengarang_Buku, Tahun_Terbit, Deskripsi, Catatan_Umum, Jenis_Buku, ID_Kategori, ID_Penerbit, Gambar) VALUES (?,?,?,?,?,?,?,?,?,?)";

            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, idBuku);
                st.setString(2, JudulBuku);
                st.setString(3, Pengarang_Buku);
                st.setString(4, tahunTerbit);
                st.setString(5, deskripsi);
                st.setString(6, catatan);
                st.setString(7, jenisBuku);
                st.setString(8, idKategori);
                st.setString(9, idPenerbit);

                File imageFile = new File(imagePath);
                FileInputStream fis = new FileInputStream(imageFile);
                st.setBinaryStream(10, fis, (int) imageFile.length());

                int rowInserted = st.executeUpdate();
                if (rowInserted > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Ditambahkan");
                    resetForm();
                    loadData();
                    showPanel();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private boolean isISBNAlreadyExists(String isbn) {
        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT COUNT(*) FROM Buku WHERE ISBN = ?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, isbn);
                ResultSet rs = st.executeQuery();
                rs.next();
                int count = rs.getInt(1);
                return count > 0;
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, e);
        }
        return false;
    }

    private void updateData() {
        String idBuku = txtISBN.getText();
        String JudulBuku = txtJudul.getText();
        String Pengarang_Buku = txtPengarang.getText();
        String tahunTerbit = txtTahunTerbit.getText();
        String deskripsi = txtDeskripsi.getText();
        String catatan = txtCatatan.getText();
        String jenisBuku = cbJenisBuku.getSelectedItem().toString();
        String idKategori = txtIDKategori.getText();
        String namaKategori = txtNamaKategori.getText();
        String idPenerbit = txtIDPenerbit.getText();
        String namaPenerbit = txtNamaPenerbit.getText();

        String imagePath = txtImage.getText();

        if (idBuku.isEmpty() || JudulBuku.isEmpty() || Pengarang_Buku.isEmpty() || tahunTerbit.isEmpty() || idKategori.isEmpty() || idPenerbit.isEmpty()
                || txtImage.equals("Image Path")) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi!", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (Connection conn = Koneksi.getConnection()) {
            String sql = "UPDATE Buku SET Judul_Buku=?, Pengarang_Buku=?, Tahun_Terbit=?, Deskripsi = ?, Catatan_Umum = ?, Jenis_Buku = ?, ID_Kategori = ?, ID_Penerbit = ?";
            if (!imagePath.equals("Image Path")) {
                sql += ",Gambar = ?";
            }
            sql += " WHERE ISBN=?";
            Connection mysqlconfig = Koneksi.getConnection();
            try (PreparedStatement st = conn.prepareStatement(sql)) {

                st.setString(1, JudulBuku);
                st.setString(2, Pengarang_Buku);
                st.setString(3, tahunTerbit);
                st.setString(4, deskripsi);
                st.setString(5, catatan);
                st.setString(6, jenisBuku);
                st.setString(7, idKategori);
                st.setString(8, idPenerbit);

                if (!imagePath.equals("Image Path")) {
                    File imageFile = new File(imagePath);
                    FileInputStream fis = new FileInputStream(imageFile);
                    st.setBinaryStream(9, fis, (int) imageFile.length());
                    st.setString(10, idBuku);
                } else {
                    st.setString(9, idBuku);
                }

                int rowUpdated = st.executeUpdate();
                if (rowUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Diperbarui");
                    resetForm();
                    loadData();
                    showPanel();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void getData(int startIndex, int entriesPage, DefaultTableModel model) {
        model.setRowCount(0);

        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT\n"
                    + "    bk.ISBN,\n"
                    + "    bk.Judul_Buku,\n"
                    + "    bk.Pengarang_Buku,\n"
                    + "    bk.Tahun_Terbit,\n"
                    + "    bk.Deskripsi,\n"
                    + "    bk.Catatan_Umum,\n"
                    + "    bk.Jenis_Buku,\n"
                    + "    ktg.ID_Kategori,\n"
                    + "    ktg.Nama_Kategori,\n"
                    + "    pnb.ID_Penerbit,\n"
                    + "    pnb.Nama_Penerbit,\n"
                    + "    bk.Gambar,\n"
                    + "    COUNT(CASE WHEN en.status_ketersediaan = 'Tersedia' THEN en.ISBN END) AS Stock\n"
                    + "FROM\n"
                    + "    buku bk\n"
                    + "INNER JOIN\n"
                    + "    kategori ktg ON ktg.ID_Kategori = bk.ID_Kategori\n"
                    + "INNER JOIN\n"
                    + "    penerbit pnb ON pnb.ID_Penerbit = bk.ID_Penerbit\n"
                    + "LEFT JOIN\n"
                    + "    entry en ON en.ISBN = bk.ISBN\n"
                    + "GROUP BY\n"
                    + "    bk.ISBN,\n"
                    + "    bk.Judul_Buku,\n"
                    + "    bk.Pengarang_Buku,\n"
                    + "    bk.Tahun_Terbit,\n"
                    + "    bk.Deskripsi,\n"
                    + "    bk.Catatan_Umum,\n"
                    + "    bk.Jenis_Buku,\n"
                    + "    ktg.ID_Kategori,\n"
                    + "    ktg.Nama_Kategori,\n"
                    + "    pnb.ID_Penerbit,\n"
                    + "    pnb.Nama_Penerbit,\n"
                    + "    bk.Gambar\n"
                    + "ORDER BY\n"
                    + "    bk.ISBN ASC\n"
                    + "LIMIT\n"
                    + "    ?, ?;";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setInt(1, startIndex);
                st.setInt(2, entriesPage);

                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String idBuku = rs.getString("ISBN");
                    String JudulBuku = rs.getString("Judul_Buku");
                    String Pengarang_Buku = rs.getString("Pengarang_Buku");
                    String tahunTerbit = rs.getString("Tahun_Terbit");
                    String Deskripsi = rs.getString("Deskripsi");
                    String catatanUmum = rs.getString("Catatan_Umum");
                    String jenisBuku = rs.getString("Jenis_Buku");
                    String idKategori = rs.getString("ID_Kategori");
                    String namaKategori = rs.getString("Nama_Kategori");
                    String idPenerbit = rs.getString("ID_Penerbit");
                    String NamaPenerbit = rs.getString("Nama_Penerbit");

                    byte[] imageData = rs.getBytes("Gambar");
                    ImageIcon imageIcon = new ImageIcon(imageData);

                    int stock = rs.getInt("Stock");

                    Object[] rowData = {idBuku, JudulBuku, Pengarang_Buku, tahunTerbit, Deskripsi, catatanUmum, jenisBuku, idKategori, namaKategori, idPenerbit, NamaPenerbit, imageIcon, stock};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void dataTabel() {
        PanelView.setVisible(false);
        PanelAdd.setVisible(true);

        int row = tblData.getSelectedRow();
        jLabel14.setText("Perbarui Data Buku Perpustakaan");

        txtISBN.setEnabled(false);
        String id = tblData.getModel().getValueAt(row, 0).toString();

        txtISBN.setText(tblData.getValueAt(row, 0).toString());
        txtJudul.setText(tblData.getValueAt(row, 1).toString());
        txtPengarang.setText(tblData.getValueAt(row, 2).toString());
        txtTahunTerbit.setText(tblData.getValueAt(row, 3).toString());
        txtDeskripsi.setText(tblData.getValueAt(row, 4).toString());
        txtCatatan.setText(tblData.getValueAt(row, 5).toString());
        cbJenisBuku.setSelectedItem(tblData.getValueAt(row, 6).toString());
        txtIDKategori.setText(tblData.getValueAt(row, 7).toString());
        txtNamaKategori.setText(tblData.getValueAt(row, 8).toString());
        txtIDPenerbit.setText(tblData.getValueAt(row, 9).toString());
        txtNamaPenerbit.setText(tblData.getValueAt(row, 10).toString());

        setImage(lbGambar, id);

    }

    private void setImage(JLabel lb_gambar, String id) {
        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT * FROM buku WHERE ISBN = '" + id + "'";
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                byte[] img = rs.getBytes("Gambar");
                if (img != null) {
                    ImageIcon imageIcon = new ImageIcon(new ImageIcon(img).getImage().
                            getScaledInstance(lb_gambar.getWidth(), lb_gambar.getHeight(), Image.SCALE_SMOOTH));
                    lb_gambar.setIcon(imageIcon);
                } else {
                    ImageIcon defaultIcon = new ImageIcon(getClass().getResource("Image/icons8_Book_120px_5.png"));
                    lb_gambar.setIcon(defaultIcon);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void deleteData() {
        int selectedRow = tblData.getSelectedRow();
        int confirm = JOptionPane.showConfirmDialog(this,
                "Apakah anda yakin menghapus data ini ?",
                "Konfirmasi Hapus Data",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            String id = tblData.getValueAt(selectedRow, 0).toString();
            try (Connection conn = Koneksi.getConnection()) {
                String sql = "DELETE FROM buku WHERE ISBN=?";
                Connection mysqlconfig = Koneksi.getConnection();
                try (PreparedStatement st = conn.prepareStatement(sql)) {
                    st.setString(1, id);
                    int rowDeleted = st.executeUpdate();

                    if (rowDeleted > 0) {
                        JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                    } else {
                        JOptionPane.showMessageDialog(this, "Data Gagal Dihapus");
                    }
                }
            } catch (Exception e) {
                Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, e);
            }
        }

        resetForm();
        loadData();
        showPanel();
    }

    private void searchData() {
        String kataKunci = txt_search.getText();
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
        model.setRowCount(0);

        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT\n"
                    + "    bk.ISBN,\n"
                    + "    bk.Judul_Buku,\n"
                    + "    bk.Pengarang_Buku,\n"
                    + "    bk.Tahun_Terbit,\n"
                    + "    bk.Deskripsi,\n"
                    + "    bk.Catatan_Umum,\n"
                    + "    bk.Jenis_Buku,\n"
                    + "    ktg.ID_Kategori,\n"
                    + "    ktg.Nama_Kategori,\n"
                    + "    pnb.ID_Penerbit,\n"
                    + "    pnb.Nama_Penerbit,\n"
                    + "    bk.Gambar,\n"
                    + "    COUNT(en.ISBN) AS Stock\n"
                    + "FROM\n"
                    + "    buku bk\n"
                    + "INNER JOIN\n"
                    + "    kategori ktg ON ktg.ID_Kategori = bk.ID_Kategori\n"
                    + "INNER JOIN\n"
                    + "    penerbit pnb ON pnb.ID_Penerbit = bk.ID_Penerbit\n"
                    + "LEFT JOIN\n"
                    + "    entry en ON en.ISBN = bk.ISBN\n"
                    + "WHERE\n"
                    + "    bk.ISBN LIKE ? OR bk.Judul_Buku LIKE ? OR bk.Pengarang_Buku LIKE ?\n"
                    + "GROUP BY\n"
                    + "    bk.ISBN,\n"
                    + "    bk.Judul_Buku,\n"
                    + "    bk.Pengarang_Buku,\n"
                    + "    bk.Tahun_Terbit,\n"
                    + "    bk.Deskripsi,\n"
                    + "    bk.Catatan_Umum,\n"
                    + "    bk.Jenis_Buku,\n"
                    + "    ktg.ID_Kategori,\n"
                    + "    ktg.Nama_Kategori,\n"
                    + "    pnb.ID_Penerbit,\n"
                    + "    pnb.Nama_Penerbit,\n"
                    + "    bk.Gambar\n"
                    + "ORDER BY\n"
                    + "    bk.ISBN ASC";
            Connection mysqlconfig = Koneksi.getConnection();
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, "%" + kataKunci + "%");
                st.setString(2, "%" + kataKunci + "%");
                st.setString(3, "%" + kataKunci + "%");

                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String idBuku = rs.getString("ISBN");
                    String JudulBuku = rs.getString("Judul_Buku");
                    String Pengarang_Buku = rs.getString("Pengarang_Buku");
                    String tahunTerbit = rs.getString("Tahun_Terbit");
                    String Deskripsi = rs.getString("Deskripsi");
                    String catatanUmum = rs.getString("Catatan_Umum");
                    String jenisBuku = rs.getString("Jenis_Buku");
                    String idKategori = rs.getString("ID_Kategori");
                    String namaKategori = rs.getString("Nama_Kategori");
                    String idPenerbit = rs.getString("ID_Penerbit");
                    String NamaPenerbit = rs.getString("Nama_Penerbit");

                    byte[] imageData = rs.getBytes("Gambar");
                    ImageIcon imageIcon = new ImageIcon(imageData);

                    int stock = rs.getInt("Stock");

                    Object[] rowData = {idBuku, JudulBuku, Pengarang_Buku, tahunTerbit, Deskripsi, catatanUmum, jenisBuku, idKategori, namaKategori, idPenerbit, NamaPenerbit, imageIcon, stock};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuBuku.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}
