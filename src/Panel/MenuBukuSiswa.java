package Panel;

import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import Config.Koneksi;

import com.raven.datechooser.SelectedDate;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.nio.file.Files;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Rifal
 */
public class MenuBukuSiswa extends javax.swing.JPanel {

    private int halamanSaatIni = 1;
    private int dataPerHalaman = 20;
    private int totalHalaman;
    private int totalPages;
    private String idKategori;
    private String idPenerbit;
  

    public MenuBukuSiswa() {
        initComponents();
        tblData.setEnabled(false);
       
txt_search.getDocument().addDocumentListener(new DocumentListener() {
    @Override
    public void insertUpdate(DocumentEvent e) {
        searchData();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        searchData();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        // Plain text components do not fire these events
    }
});

        setTabelModel();
        

        Color headerColor = new Color(127, 140, 117);
        tblData.getTableHeader().setBackground(headerColor);
        loadData();
        paginationBuku();
       
        setTableRenderer();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelMain = new javax.swing.JPanel();
        PanelView = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lb_iconAnggota = new javax.swing.JLabel();
        lb_halaman = new javax.swing.JLabel();
        btn_first = new javax.swing.JButton();
        btn_before = new javax.swing.JButton();
        cbx_data = new javax.swing.JComboBox<>();
        btn_next = new javax.swing.JButton();
        btn_last = new javax.swing.JButton();
        txt_search = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        PanelMain.setBackground(new java.awt.Color(255, 255, 255));
        PanelMain.setPreferredSize(new java.awt.Dimension(950, 590));
        PanelMain.setLayout(new java.awt.CardLayout());

        PanelView.setBackground(new java.awt.Color(255, 255, 255));
        PanelView.setPreferredSize(new java.awt.Dimension(950, 590));

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel9.setText("List Buku");

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel10.setText("Daftar Buku");

        lb_iconAnggota.setBackground(new java.awt.Color(250, 250, 250));
        lb_iconAnggota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/pngwing.com (16).png"))); // NOI18N

        lb_halaman.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_halaman.setText("Halaman of Total Halaman");

        btn_first.setText("First Page");

        btn_before.setText("<");

        cbx_data.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "40", "80" }));

        btn_next.setText(">");

        btn_last.setText("Last Page");

        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_searchKeyTyped(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8_search_database_30px.png"))); // NOI18N

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblData.setRowHeight(150);
        tblData.setShowGrid(true);
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblData);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/listpp.png"))); // NOI18N

        javax.swing.GroupLayout PanelViewLayout = new javax.swing.GroupLayout(PanelView);
        PanelView.setLayout(PanelViewLayout);
        PanelViewLayout.setHorizontalGroup(
            PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelViewLayout.createSequentialGroup()
                        .addComponent(lb_iconAnggota)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelViewLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 759, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelViewLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelViewLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addGroup(PanelViewLayout.createSequentialGroup()
                                    .addComponent(btn_first)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_before)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_next)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_last))
                                .addComponent(lb_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelViewLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(14, 14, 14))
        );
        PanelViewLayout.setVerticalGroup(
            PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lb_iconAnggota)
                    .addGroup(PanelViewLayout.createSequentialGroup()
                        .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(44, 44, 44)))
                .addGap(13, 13, 13)
                .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelViewLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lb_halaman, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_first, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_before, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_last, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        PanelMain.add(PanelView, "card2");

        add(PanelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void txt_searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyTyped
        // TODO add your handling code here:
        searchData();
    }//GEN-LAST:event_txt_searchKeyTyped

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked

    }//GEN-LAST:event_tblDataMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelMain;
    private javax.swing.JPanel PanelView;
    private javax.swing.JButton btn_before;
    private javax.swing.JButton btn_first;
    private javax.swing.JButton btn_last;
    private javax.swing.JButton btn_next;
    private javax.swing.JComboBox<String> cbx_data;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lb_halaman;
    private javax.swing.JLabel lb_iconAnggota;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables
 private void autoResizeAllColumns() {
        int columns = tblData.getColumnCount();
        for (int i = 0; i < columns; i++) {
            TableColumn column = tblData.getColumnModel().getColumn(i);
            int width = (int) tblData.getTableHeader().getDefaultRenderer()
                    .getTableCellRendererComponent(tblData, column.getHeaderValue(), false, false, -1, i)
                    .getPreferredSize().getWidth();
            for (int row = 0; row < tblData.getRowCount(); row++) {
                int preferedWidth = (int) tblData.getCellRenderer(row, i)
                        .getTableCellRendererComponent(tblData, tblData.getValueAt(row, i), false, false, row, i)
                        .getPreferredSize().getWidth();
                width = Math.max(width, preferedWidth);
            }
            column.setPreferredWidth(width);
        }
    }

    private void paginationBuku() {
        btn_first.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = 1;
                loadData();
            }

        });
        btn_before.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni > 1) {
                    halamanSaatIni--;
                    loadData();
                }
            }
        });
        cbx_data.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dataPerHalaman = Integer.parseInt(cbx_data.getSelectedItem().toString());
                halamanSaatIni = 1;
                loadData();
            }
        });
        btn_next.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni < totalPages) {
                    halamanSaatIni++;
                    loadData();
                }
            }
        });
        btn_last.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = totalPages;
                loadData();
            }
        });
    }

    
    private void calculateTotalPages() {
        int totalData = getTotalData();
        totalPages = (int) Math.ceil((double) totalData / dataPerHalaman);
    }

    private int getTotalData() {
        int totalData = 0;
        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT COUNT(*) AS total from Buku";

            try (PreparedStatement st = conn.prepareStatement(sql)) {
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    totalData = rs.getInt("total");

                }

            }

        } catch (Exception e) {
            Logger.getLogger(MenuBukuSiswa.class.getName()).log(Level.SEVERE, null, e);
        }
        return totalData;
    }

    private void loadData() {

        calculateTotalPages();
        int totalData = getTotalData();
        lb_halaman.setText(String.valueOf("Halaman " + halamanSaatIni + " dari Total Data " + totalData));

        int startIndex = (halamanSaatIni - 1) * dataPerHalaman;
        getData(startIndex, dataPerHalaman, (DefaultTableModel) tblData.getModel());

        
    }

    private void showPanel() {
        PanelMain.removeAll();
        PanelMain.add(new MenuBukuSiswa());
        PanelMain.repaint();
        PanelMain.revalidate();
    }

   
    private void setTabelModel() {
         DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
             return false;
        }
    };
        model.addColumn("ISBN");
        model.addColumn("Judul Buku");
        model.addColumn("Pengarang_Buku");
        model.addColumn("Tahun Terbit");
        model.addColumn("Deskripsi");
        model.addColumn("Catatan Umum");
        model.addColumn("Jenis Buku");
        model.addColumn("ID Kategori");
        model.addColumn("Nama Kategori");
        model.addColumn("ID Penerbit");
        model.addColumn("Nama Penerbit");
        model.addColumn("Gambar");
        model.addColumn("Stock");
tblData.setModel(model);
        autoResizeAllColumns();
tblData.setAutoCreateRowSorter(true);
        tblData.getTableHeader().setReorderingAllowed(false);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        for (int i = 0; i < tblData.getColumnCount(); i++) {
            tblData.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            tblData.setDefaultEditor(Object.class, null);
        }
    }

    private void setTableRenderer() {
        class CustomRender extends DefaultTableCellRenderer {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

                if (value instanceof ImageIcon) {
                    ImageIcon icon = (ImageIcon) value;
                    Image originalImage = icon.getImage();
                    int desireWidth = 70;
                    int desireHeight = 90;

                    Image resizedImage = originalImage.getScaledInstance(desireWidth, desireHeight, Image.SCALE_SMOOTH);
                    ImageIcon resizedIcon = new ImageIcon(resizedImage);

                    JLabel label = new JLabel(resizedIcon);
                    label.setHorizontalAlignment(JLabel.CENTER);

                    return label;
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }

        }
        tblData.getColumnModel().getColumn(11).setCellRenderer(new CustomRender());
    }

   

    class ImageRender extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value instanceof ImageIcon) {
                ImageIcon icon = (ImageIcon) value;
                JLabel label = new JLabel(icon);
                label.setHorizontalAlignment(JLabel.CENTER);
                return label;
            }
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

        }
    }

   

    private void getData(int startIndex, int entriesPage, DefaultTableModel model) {
        model.setRowCount(0);

        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT\n"
                    + "    bk.ISBN,\n"
                    + "    bk.Judul_Buku,\n"
                    + "    bk.Pengarang_Buku,\n"
                    + "    bk.Tahun_Terbit,\n"
                    + "    bk.Deskripsi,\n"
                    + "    bk.Catatan_Umum,\n"
                    + "    bk.Jenis_Buku,\n"
                    + "    ktg.ID_Kategori,\n"
                    + "    ktg.Nama_Kategori,\n"
                    + "    pnb.ID_Penerbit,\n"
                    + "    pnb.Nama_Penerbit,\n"
                    + "    bk.Gambar,\n"
                    + "    COUNT(CASE WHEN en.status_ketersediaan = 'Tersedia' THEN en.ISBN END) AS Stock\n"
                    + "FROM\n"
                    + "    buku bk\n"
                    + "INNER JOIN\n"
                    + "    kategori ktg ON ktg.ID_Kategori = bk.ID_Kategori\n"
                    + "INNER JOIN\n"
                    + "    penerbit pnb ON pnb.ID_Penerbit = bk.ID_Penerbit\n"
                    + "LEFT JOIN\n"
                    + "    entry en ON en.ISBN = bk.ISBN\n"
                    + "GROUP BY\n"
                    + "    bk.ISBN,\n"
                    + "    bk.Judul_Buku,\n"
                    + "    bk.Pengarang_Buku,\n"
                    + "    bk.Tahun_Terbit,\n"
                    + "    bk.Deskripsi,\n"
                    + "    bk.Catatan_Umum,\n"
                    + "    bk.Jenis_Buku,\n"
                    + "    ktg.ID_Kategori,\n"
                    + "    ktg.Nama_Kategori,\n"
                    + "    pnb.ID_Penerbit,\n"
                    + "    pnb.Nama_Penerbit,\n"
                    + "    bk.Gambar\n"
                    + "ORDER BY\n"
                    + "    bk.ISBN ASC\n"
                    + "LIMIT\n"
                    + "    ?, ?;";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setInt(1, startIndex);
                st.setInt(2, entriesPage);

                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String idBuku = rs.getString("ISBN");
                    String JudulBuku = rs.getString("Judul_Buku");
                    String Pengarang_Buku = rs.getString("Pengarang_Buku");
                    String tahunTerbit = rs.getString("Tahun_Terbit");
                    String Deskripsi = rs.getString("Deskripsi");
                    String catatanUmum = rs.getString("Catatan_Umum");
                    String jenisBuku = rs.getString("Jenis_Buku");
                    String idKategori = rs.getString("ID_Kategori");
                    String namaKategori = rs.getString("Nama_Kategori");
                    String idPenerbit = rs.getString("ID_Penerbit");
                    String NamaPenerbit = rs.getString("Nama_Penerbit");

                    byte[] imageData = rs.getBytes("Gambar");
                    ImageIcon imageIcon = new ImageIcon(imageData);

                    int stock = rs.getInt("Stock");

                    Object[] rowData = {idBuku, JudulBuku, Pengarang_Buku, tahunTerbit, Deskripsi, catatanUmum, jenisBuku, idKategori, namaKategori, idPenerbit, NamaPenerbit, imageIcon, stock};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuBukuSiswa.class.getName()).log(Level.SEVERE, null, e);
        }
    }

  

    private void setImage(JLabel lb_gambar, String id) {
        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT * FROM buku WHERE ISBN = '" + id + "'";
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                byte[] img = rs.getBytes("Gambar");
                if (img != null) {
                    ImageIcon imageIcon = new ImageIcon(new ImageIcon(img).getImage().
                            getScaledInstance(lb_gambar.getWidth(), lb_gambar.getHeight(), Image.SCALE_SMOOTH));
                    lb_gambar.setIcon(imageIcon);
                } else {
                    ImageIcon defaultIcon = new ImageIcon(getClass().getResource("Image/icons8_Book_120px_5.png"));
                    lb_gambar.setIcon(defaultIcon);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    

    private void searchData() {
        String kataKunci = txt_search.getText();
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
        model.setRowCount(0);

        try (Connection conn = Koneksi.getConnection()) {
            String sql = "SELECT\n"
                    + "    bk.ISBN,\n"
                    + "    bk.Judul_Buku,\n"
                    + "    bk.Pengarang_Buku,\n"
                    + "    bk.Tahun_Terbit,\n"
                    + "    bk.Deskripsi,\n"
                    + "    bk.Catatan_Umum,\n"
                    + "    bk.Jenis_Buku,\n"
                    + "    ktg.ID_Kategori,\n"
                    + "    ktg.Nama_Kategori,\n"
                    + "    pnb.ID_Penerbit,\n"
                    + "    pnb.Nama_Penerbit,\n"
                    + "    bk.Gambar,\n"
                    + "    COUNT(en.ISBN) AS Stock\n"
                    + "FROM\n"
                    + "    buku bk\n"
                    + "INNER JOIN\n"
                    + "    kategori ktg ON ktg.ID_Kategori = bk.ID_Kategori\n"
                    + "INNER JOIN\n"
                    + "    penerbit pnb ON pnb.ID_Penerbit = bk.ID_Penerbit\n"
                    + "LEFT JOIN\n"
                    + "    entry en ON en.ISBN = bk.ISBN\n"
                    + "WHERE\n"
                    + "    bk.ISBN LIKE ? OR bk.Judul_Buku LIKE ? OR bk.Pengarang_Buku LIKE ?\n"
                    + "GROUP BY\n"
                    + "    bk.ISBN,\n"
                    + "    bk.Judul_Buku,\n"
                    + "    bk.Pengarang_Buku,\n"
                    + "    bk.Tahun_Terbit,\n"
                    + "    bk.Deskripsi,\n"
                    + "    bk.Catatan_Umum,\n"
                    + "    bk.Jenis_Buku,\n"
                    + "    ktg.ID_Kategori,\n"
                    + "    ktg.Nama_Kategori,\n"
                    + "    pnb.ID_Penerbit,\n"
                    + "    pnb.Nama_Penerbit,\n"
                    + "    bk.Gambar\n"
                    + "ORDER BY\n"
                    + "    bk.ISBN ASC";
            Connection mysqlconfig = Koneksi.getConnection();
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, "%" + kataKunci + "%");
                st.setString(2, "%" + kataKunci + "%");
                st.setString(3, "%" + kataKunci + "%");

                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String idBuku = rs.getString("ISBN");
                    String JudulBuku = rs.getString("Judul_Buku");
                    String Pengarang_Buku = rs.getString("Pengarang_Buku");
                    String tahunTerbit = rs.getString("Tahun_Terbit");
                    String Deskripsi = rs.getString("Deskripsi");
                    String catatanUmum = rs.getString("Catatan_Umum");
                    String jenisBuku = rs.getString("Jenis_Buku");
                    String idKategori = rs.getString("ID_Kategori");
                    String namaKategori = rs.getString("Nama_Kategori");
                    String idPenerbit = rs.getString("ID_Penerbit");
                    String NamaPenerbit = rs.getString("Nama_Penerbit");

                    byte[] imageData = rs.getBytes("Gambar");
                    ImageIcon imageIcon = new ImageIcon(imageData);

                    int stock = rs.getInt("Stock");

                    Object[] rowData = {idBuku, JudulBuku, Pengarang_Buku, tahunTerbit, Deskripsi, catatanUmum, jenisBuku, idKategori, namaKategori, idPenerbit, NamaPenerbit, imageIcon, stock};
                    model.addRow(rowData);
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(MenuBukuSiswa.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}
